<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.base.dao.UserRoleMapper">
	<resultMap id="BaseResultMap" type="com.base.model.UserRole">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="user_id" property="userId" jdbcType="INTEGER" />
		<result column="role_id" property="roleId" jdbcType="INTEGER" />
		<result column="temporary" property="temporary" jdbcType="VARCHAR" />
		<result column="provisional" property="provisional" jdbcType="INTEGER" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		id, user_id, role_id
	</sql>
	<select id="selectByExample" resultMap="BaseResultMap"
		parameterType="com.base.model.UserRoleExample">
		select
		<if test="distinct">
			distinct
		</if>
		<choose>
			<when test="column != null"> ${column} 		</when>
			<otherwise>
				<include refid="Base_Column_List" />
			</otherwise>
		</choose>
		from tb_user_role
		${join}
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="groupBy != null"> group by ${groupBy}    </if>
		<if test="having != null"> having ${having}    </if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from tb_user_role
		where id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from tb_user_role
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<delete id="deleteByExample" parameterType="com.base.model.UserRoleExample">
		delete from tb_user_role
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="com.base.model.UserRole">
		insert into tb_user_role (id, user_id, role_id
		)
		values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER},
		#{roleId,jdbcType=INTEGER}
		)
	</insert>
	<insert id="insertSelective" parameterType="com.base.model.UserRole"
		useGeneratedKeys="true" keyProperty="id">
		insert into tb_user_role
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="userId != null">
				user_id,
			</if>
			<if test="roleId != null">
				role_id,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="userId != null">
				#{userId,jdbcType=INTEGER},
			</if>
			<if test="roleId != null">
				#{roleId,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>
	<select id="countByExample" parameterType="com.base.model.UserRoleExample"
		resultType="java.lang.Integer">
		select count(*) from tb_user_role
		${join}
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		update tb_user_role
		<set>
			<if test="record.id != null">
				id = #{record.id,jdbcType=INTEGER},
			</if>
			<if test="record.userId != null">
				user_id = #{record.userId,jdbcType=INTEGER},
			</if>
			<if test="record.roleId != null">
				role_id = #{record.roleId,jdbcType=INTEGER},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update tb_user_role
		set id = #{record.id,jdbcType=INTEGER},
		user_id = #{record.userId,jdbcType=INTEGER},
		role_id = #{record.roleId,jdbcType=INTEGER}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="com.base.model.UserRole">
		update tb_user_role
		<set>
			<if test="userId != null">
				user_id = #{userId,jdbcType=INTEGER},
			</if>
			<if test="roleId != null">
				role_id = #{roleId,jdbcType=INTEGER},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.base.model.UserRole">
		update tb_user_role
		set user_id = #{userId,jdbcType=INTEGER},
		role_id = #{roleId,jdbcType=INTEGER}
		where id = #{id,jdbcType=INTEGER}
	</update>
	<select id="selectByModel" resultMap="BaseResultMap"
		parameterType="com.base.model.UserRole">
		select
		<include refid="Base_Column_List" />
		from tb_user_role
		where 1 = 1
		<if test="userId != null"> and
			user_id = #{userId,jdbcType=INTEGER}
		</if>
		<if test="roleId != null"> and
			role_id = #{roleId,jdbcType=INTEGER}
		</if>
	</select>
	<select id="distinct" resultMap="BaseResultMap" parameterType="com.base.model.UserRoleExample">
		select distinct ${column} from tb_user_role
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<select id="sum" resultType="java.lang.String" parameterType="com.base.model.UserRoleExample">
		select sum(${column}) as ${column} from tb_user_role
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<select id="min" resultType="java.lang.String" parameterType="com.base.model.UserRoleExample">
		select min(${column}) as ${column} from tb_user_role
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<select id="max" resultType="java.lang.String" parameterType="com.base.model.UserRoleExample">
		select max(${column}) as ${column} from tb_user_role
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<select id="avg" resultType="java.lang.String" parameterType="com.base.model.UserRoleExample">
		select avg(${column}) as ${column} from tb_user_role
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<sql id="Base_Column_List_Map">
		id, user_id as userId, role_id
		as roleId
	</sql>
	<select id="selectByExampleForMap" resultType="map"
		parameterType="com.base.model.UserRoleExample">
		select
		<if test="distinct"> distinct    </if>
		<choose>
			<when test="column != null"> ${column} 		</when>
			<otherwise>
				<include refid="Base_Column_List_Map" />
			</otherwise>
		</choose>
		from tb_user_role
		${join}
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="groupBy != null"> group by ${groupBy}    </if>
		<if test="having != null"> having ${having}    </if>
		<if test="orderByClause != null"> order by ${orderByClause}    </if>
	</select>
	<resultMap id="BaseResultMapJoin" type="com.base.model.UserRole">
		<id column="userrole_id" property="id" jdbcType="INTEGER" />
		<result column="userrole_user_id" property="userId" jdbcType="INTEGER" />
		<result column="userrole_role_id" property="roleId" jdbcType="INTEGER" />
	</resultMap>
	<insert id="batchInsert" parameterType="java.util.List">
		insert into tb_user_role (id, user_id, role_id
		)
		values
		<foreach collection="list" item="item" index="index"
			separator=","> (#{item.id,jdbcType=INTEGER},
			#{item.userId,jdbcType=INTEGER}, #{item.roleId,jdbcType=INTEGER}
			)
		</foreach>
	</insert>
</mapper>
